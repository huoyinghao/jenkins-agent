name: Build Images
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-alpha.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+

  workflow_dispatch:
  
jobs:
  init-variable:
    runs-on: ubuntu-latest
    outputs:
      container_tag: ${{ steps.init_variable.outputs.container_tag }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: output environment variable
        id: init_variable
        run: |
          set -x
          if [[ $GITHUB_REF =~ ^refs/tags/v ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git describe --tags --abbrev=8)
          fi
          echo "container_tag=${VERSION}" >> $GITHUB_OUTPUT

  manifest-conformance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Validate Helm Policy
        run: |
          OUTPUT=github make conftest 

  build-jenkins:
    permissions:
      contents: read
      packages: write
    needs: [init-variable, manifest-conformance]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: use-setup-buildx-action
        uses: docker/setup-buildx-action@v2
      - name: login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: build jenkins
        uses: docker/build-push-action@v4.1.1
        with:
          context: ./
          file: ./Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/jenkins:${{ needs.init-variable.outputs.container_tag }}-2.443
            ${{ secrets.DOCKER_USERNAME }}/jenkins:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-jenkins-agent-base:
    permissions:
      contents: read
      packages: write
    needs: [init-variable, manifest-conformance]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: use setup-buildx-action
        uses: docker/setup-buildx-action@v2
      - name: build jenkins agent with docker
        uses: docker/build-push-action@v4.1.1
        with:
          context: ./jenkins-agent/base
          file: ./jenkins-agent/base/Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-base:${{ needs.init-variable.outputs.container_tag }}
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: build jenkins agent with podman
        uses: docker/build-push-action@v4.1.1
        with:
          context: ./jenkins-agent/base
          file: ./jenkins-agent/base/podman/Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-base:${{ needs.init-variable.outputs.container_tag }}-podman
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-base:latest-podman
          build-args: |
            REGISTRY_REPO=${{ secrets.DOCKER_USERNAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-agents:
    needs: [build-jenkins-agent-base, init-variable]
    strategy:
      matrix:
        runtime: [docker, podman]
        agent: [python, go, nodejs]
        include:
          - agent: nodejs
            version: 16.17.0
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: init variables
        id: step-variable
        run: |
          echo "suffix=$([ ${{ matrix.runtime }} == podman ] && (echo -podman))" >> $GITHUB_OUTPUT
          echo "image=jenkins-agent-${{ matrix.agent }}" >> $GITHUB_OUTPUT
          echo "dockerfile=./jenkins-agent/${{ matrix.agent }}/Dockerfile" >> $GITHUB_OUTPUT
          echo "context=./jenkins-agent/${{ matrix.agent }}/" >> $GITHUB_OUTPUT
      - name: use setup-buildx-action
        uses: docker/setup-buildx-action@v2
      - name: build jenkins agent with ${{ matrix.agent }}
        uses: docker/build-push-action@v4.1.1
        with:
          context: ${{ steps.step-variable.outputs.context }}
          file: ${{ steps.step-variable.outputs.dockerfile }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm64
          # In the format of "amambadev/jenkins-agent-go:v0.2.1-podman"   
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ steps.step-variable.outputs.image }}:${{ needs.init-variable.outputs.container_tag }}${{ steps.step-variable.outputs.suffix }}
            ${{ secrets.DOCKER_USERNAME }}/${{ steps.step-variable.outputs.image }}:latest${{ steps.step-variable.outputs.suffix }}
          build-args: |
            REGISTRY_REPO=${{ secrets.DOCKER_USERNAME }}
            RUNTIME=${{ steps.step-variable.outputs.suffix }}
            VERSION=${{ matrix.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-agent-maven:
    needs: [ build-jenkins-agent-base, init-variable ]
    strategy:
      matrix:
        runtime: [docker, podman]
        version: [1.8.0, 11]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: init variables
        id: step-variable
        run: |
          export "runtime=$([ ${{ matrix.runtime }} == podman ] && (echo -podman))"
          export "jdkVersion=$([ ${{ matrix.version }} == 1.8.0 ] && (echo -jdk1.8) || (echo -jdk11) )"
          echo "runtime=${runtime}" >> $GITHUB_OUTPUT
          echo "suffix=${jdkVersion}${runtime}" >> $GITHUB_OUTPUT
      - name: use setup-buildx-action
        uses: docker/setup-buildx-action@v2
      - name: build jenkins agent with maven
        uses: docker/build-push-action@v4.1.1
        with:
          context: ./jenkins-agent/maven
          file: ./jenkins-agent/maven/Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-maven:${{ needs.init-variable.outputs.container_tag }}${{ steps.step-variable.outputs.suffix }}
            ${{ secrets.DOCKER_USERNAME }}/jenkins-agent-maven:latest${{ steps.step-variable.outputs.suffix }}
          build-args: |
            REGISTRY_REPO=${{ secrets.DOCKER_USERNAME }}
            RUNTIME=${{ steps.step-variable.outputs.runtime }}
            JAVA_VERSION=${{ matrix.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  e2e:
    runs-on: ubuntu-latest
    if: github.ref_type != 'tag'
    needs: [ init-variable, build-jenkins ]
    steps:  
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1

      - name: Create kind cluster
        uses: helm/kind-action@v1.7.0

      - name: Deploy Chart
        run: |
          ./hack/install/envsubst.sh
          VERSION=${{ needs.init-variable.outputs.container_tag }} make deploy

  publish-chart:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ build-jenkins, build-agent-maven, build-agents ]
    permissions:
      contents: write
    env:
      HELM_CHARTS_DIR: charts
      HELM_CHART_NAME: jenkins
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Get the version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Tag helm chart image
        run: |
          image_tag=${{ steps.get_version.outputs.VERSION }}
          chart_version=${{ steps.get_version.outputs.VERSION }}
          sed -i "s/latest/${image_tag}/g" $HELM_CHARTS_DIR/values.yaml
          chart_smever=${chart_version#"v"}
          sed -i "s/0.1.0/${chart_smever}/g" $HELM_CHARTS_DIR/Chart.yaml

      - uses: getsentry/action-github-app-token@v2
        id: get_app_token
        with:
            app_id: ${{ secrets.APP_ID }}
            private_key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Sync Chart Repo
        run: |
          git config --global user.email "amamba[bot]@users.noreply.github.com"
          git config --global user.name "amamba[bot]"
          git clone https://x-access-token:${{ steps.get_app_token.outputs.token }}@github.com/amamba-io/charts.git amamba-charts
          helm package $HELM_CHARTS_DIR --destination ./amamba-charts/docs/
          helm repo index --url https://amamba-io.github.io/charts ./amamba-charts/docs/
          cd amamba-charts/
          git add docs/
          chart_version=${{ steps.get_version.outputs.VERSION }}
          git commit -m "update jenkins chart ${chart_version}"
          git push https://x-access-token:${{ steps.get_app_token.outputs.token }}@github.com/amamba-io/charts.git